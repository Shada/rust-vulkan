stages:
  - build-shaders
  - build
  - build-release
  - test

.setup-glslc:
  tags:
    - vulkan
  before_script:
    - rustc --version && cargo --version
    - cargo clean
    - git clone --depth 1 --branch v2022.4 https://github.com/google/shaderc
    - cd shaderc
    - docker build --rm -t shaderc/shaderc .

build-shaders:
  stage: build-shaders
  tags:
    - vulkan
  extends: .setup-glslc
  script:
    - docker run -v ${PWD}/assets/shaders:/code --rm shaderc/shaderc glslc shader.vert -o vert.spv
    - docker run -v ${PWD}/assets/shaders:/code --rm shaderc/shaderc glslc shader.frag -o frag.spv
  artifacts:
    paths:
      - assets/shaders

rust-vulkan-build:
  tags:
    - rust
    - vulkan
  stage: build
  extends: .setup-glslc
  dependencies: 
    - build-shaders
  script:
    - ls -la assets/shaders
    - cargo build
  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME-$CI_COMMIT_ID-debug"
    paths:
      - target/debug/vulkan-tutorial
    expire_in: 1 week

rust-vulkan-build-release:
  tags:
    - rust
    - vulkan
  stage: build-release
  extends: .setup-glslc
  dependencies: 
    - build-shaders
  script:
    - cargo build --release
  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME-$CI_COMMIT_ID-release"
    paths:
      - target/release/vulkan-tutorial
  rules:
    - if: $CI_COMMIT_TAG

# Use cargo to test the project
test:cargo:
  tags:
    - rust
    - vulkan
  stage: test
  script:
    - rustc --version && cargo --version  # Print version info for debugging
    - cargo test --workspace --verbose
